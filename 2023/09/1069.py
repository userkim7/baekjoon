#1069

#은진이는 지금 (X, Y)에 있고, (0, 0)에 있는 집으로 가능한 빨리 가려고 한다. 이동할 수 있는 방법은 다음 두 가지이다.
#첫 번째 방법은 걷는것이다. 걸을 때는 1초에 1만큼 움직인다. 두 번째 방법은 점프하는 것이다. 점프를 하게 되면, T초에 D만큼 움직인다. 점프는 일직선으로만 할 수 있고, 정확하게 D칸만 움직일 수 있다.
#위의 두 가지 방법을 이용해서 집에 돌아오는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오. 꼭 한 가지 방법만 사용해야 되는것이 아니고, 두 가지 방법을 적절히 조합해서 가장 빠른 시간을 구하는 것이다.

##첫째 줄에 네 정수 X, Y, D, T가 주어진다.
##첫째 줄에 집에 돌아오는데 걸리는 시간의 최솟값을 출력한다. 절대/상대 오차는 10-9까지 허용한다.

from math import sqrt
X,Y,D,T=map(int,input().split())
l=sqrt(X**2+Y**2) #집까지 거리
if D>T: #점프가 빠름
    t=(l//D)*T #l 전까지 점프하는데 걸린 시간
    l-=(l//D)*D #l 전까지 점프한 거리
    t+=min([l,T+D-l,[T,T*2][int(t==0)]]) #걷기, 점프 후 되돌아가기, (첫 점프인가?) 총 점프의 백터합|두번의 점프의 백터합 이 걸리는 시간
else: #걷는게 빠름
    t=l
print(t)

###백터
