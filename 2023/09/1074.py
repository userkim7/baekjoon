#1074

#한수는 크기가 2N × 2N인 2차원 배열을 Z모양으로 탐색하려고 한다. 예를 들어, 2×2배열을 왼쪽 위칸, 오른쪽 위칸, 왼쪽 아래칸, 오른쪽 아래칸 순서대로 방문하면 Z모양이다.
#N > 1인 경우, 배열을 크기가 2N-1 × 2N-1로 4등분 한 후에 재귀적으로 순서대로 방문한다.
#다음 예는 22 × 22 크기의 배열을 방문한 순서이다.
#N이 주어졌을 때, r행 c열을 몇 번째로 방문하는지 출력하는 프로그램을 작성하시오.
#다음은 N=3일 때의 예이다.

##첫째 줄에 정수 N, r, c가 주어진다.
##r행 c열을 몇 번째로 방문했는지 출력한다.

def divide(n,r,c):
    global add
    if n==2:
        add+=[[0,1],[2,3]][r][c] #마지막 4분할 방문 순서
        return
    if r<n/2: #+과 같이 네칸으로 나눈 후 그 큰 칸의 최소 방문 순서를 찾은 후, 그 칸을 다시 나눔
        if c<n/2:
            divide(n//2,r,c)
        else:
            add+=n**2//4
            divide(n//2,r,c-n//2)
    else:
        if c<n/2:
            add+=2*(n**2//4)
            divide(n//2,r-n//2,c)
        else:
            add+=3*(n**2//4)
            divide(n//2,r-n//2,c-n//2)
N,R,C=map(int,input().split())
add=0 #방문 순서
divide(2**N,R,C)
print(add)

##2^N^2칸의 정사각형에서 2^(N-1)^2칸의 정사각형 4개로 나누며 그 칸 중 어디 속하는지를 계속 나누다보면 2^1^2칸의 정사각형까지 도달
##최종 정사각형 이전까지 돌아다닌 횟수+마지막 사각형에서 돌아다닐 횟수
###재귀함수,분할 정복
